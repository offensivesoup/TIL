import random
# 이해를 위한 금기 해제 : 한글명으로 사용함

class 포켓몬:
    # 세상의 모든 포켓몬은 고유 번호를 가진다.
    # 각 인스턴스의 고유번호가 x
    # 피카츄라는 종은 모두 n번의 고유 번호를 가진다.
    고유번호 = "세상의 모든 포켓몬은 고유 번호를 가진다."
    현재_발견된_총_포켓몬_수 = 0
    포켓몬_종류 = {}

    # 매직 메서드 : 생성자
    # 인스턴스 메서드
    def __init__(self, 종, 타입, 속도, 스킬1 = '몸통박치기', 체력 = 100, 레벨 = 1): # self는 매개변수
        self.종 = 종
        self.타입 = 타입
        self.속도 = 속도
        self.스킬1 = 스킬1
        self.체력 = 체력
        self.레벨 = 레벨
        포켓몬.새로운_포켓몬이_탄생했다(종)
        self.고유번호 = 포켓몬.포켓몬_종류[종][0]
        # 왜 다시 적냐 => 변수와 인스턴스 변수의 영역이 다르기 때문에
    # 인스턴스 메서드 : 해당 클래스의 모든 인스턴스들이 공통적으로 하는 일
    # 함수임.
    def 스킬1사용(self):
        # 단순 문구 출력
        print(f'{self.종}은 {self.스킬1}을 사용하였다.')
        # 추가 조건에 따른 서로 다른 경우 출력
        # 무작위 정수를 하나 뽑아서
        # 그 정수의 값에 따라 서로 다른 결과를 출력
        주사위 = random.randint(1,6) # 1~6까지 수중 무작위 하나 반환
        if 주사위 == 6:
            print('효과는 굉장했다')
        elif 주사위 >= 3:
            print('적에게 적중했다.')
        else:
            print('그러나 아무일도 일어나지 않았다.')
    
    # 클래스의 변수를 변경시키거나, 혹은, 클래스와 관련된 어떠한 속성, 행위를 실행하는 함수
    # 함수임
    @classmethod
    def 새로운_포켓몬이_탄생했다(cls, 종):
        # 호출 된 순간이 인스턴스 생성된 순간에만 쓰일것이라고 우리끼리 약속
        cls.현재_발견된_총_포켓몬_수 += 1
        # 만약 처음 발견한 종이라면:
        if 종 not in cls.포켓몬_종류:
            print('한 번도 본 적 없던 포켓몬이다!')
            # 종의 고유 번호 => 포켓몬_종류 딕셔너리의 총 길이 + 1
            # [종의 고유번호, 종의 개체수]
            cls.포켓몬_종류[종] = [len(cls.포켓몬_종류) + 1, 1]
            print(f'{종}! 앞으로 너의 고유 번호는 {cls.포켓몬_종류[종][0]}번이야')
    # 아니라면,
        else:
            print(f'{종}의 개체수가 1 증가하였다.')
            cls.포켓몬_종류[종][1] += 1
            print(f'{종}의 총 개체수는 {cls.포켓몬_종류[종][1]}')
    
    # 클래스의 변수나, 속성 혹은
    # 인스턴스 변수나, 속성에 영향을 미치거나
    # 필요로 하지 않은 행동에 대한 메서드
    @staticmethod
    def 포켓몬이란():
        return '포켓몬이란... 일본의 게임을 기반으로한... ~~~ ...'

    # 혹은 클래스의 어떠한 행위나, 직접적인 클래스 변수가 아닌 다른 값
    # 하지만, 이 클래스와 연관되어 있는 어떠한 행위들
    @staticmethod
    def 특정_레벨의_경험치요구량(lv):
        return lv * 200
    
    def 현재_내_레벨의_경험치_요구량(self):
        return self.lv * 200
    
    # 소멸자    
    # def __del__(self):
    #     print(f'{self.종}')

    def __call__(self):
        return self.종[:2] * 2
    
    def __str__(self):
        return f'레벨 : {self.레벨} \n체력 : {self.체력} \n보유스킬 : {self.스킬1}'
    
    def __repr__(self):
        # 사용자 (개발자)을 위한 정보
        # 해당 객체가 어떤 데이터타입인지,
        # 어떤 속성을 가졌는지,
        # 어떤 형식으로 재사용 가능한지
        # 어떤 유형의 메서드들을 사용 가능한지
        # 에 대한 가이드가 될 정보
        return '푸키먼()'
    
    # def __gt__(self):
    # def __gte__(self):

class 피카츄(포켓몬):
    def __init__(self, 종 = '피카츄', 타입 = '전기', 속도 = 100,  스킬1 = '몸통박치기', 체력 = 100, 레벨 = 1):
        super().__init__(종 = '피카츄', 타입 = '전기', 속도 = 100,  스킬1 = '몸통박치기', 체력 = 100, 레벨 = 1)

# 포켓몬 클래스의 인스턴스를 생성 후 피카츄 변수에 할당.

피카츄1 = 포켓몬(종 = '피카츄', 타입 = '전기', 속도 = 100)
피카츄2 = 포켓몬('피카츄','전기', 110)
피카츄3 = 피카츄()
파이리  = 포켓몬('파이리','불',60)
print('*'*30)
print(피카츄1.고유번호)
print(피카츄2.고유번호)
print(파이리.고유번호)
print(f'피카츄를 부르면 {피카츄1()} 하고 웁니다.')
print(피카츄1)
# # 피카츄 변수에 할당된 인스턴스의 속성 고유번호를 출력
# print(피카츄1.고유번호)
# print(피카츄2.고유번호)
# # 같은 값을 넣으면 같은 값이 나옴
# print(피카츄1.종)
# print(피카츄2.종)
# # 다른 값을 넣으면 다른 값이 나옴
# print(피카츄1.속도)
# print(피카츄2.속도)
# # 클래스가 클래스 변수 출력
# print(포켓몬.고유번호)
# # # 클래스에도 없는 변수를?
# # print(피카츄1.없는변수)
# # # global에 있는 변수를 찾도록 하면?
# # 글로벌_변수 = '반성문을 영어로 하면 글로벌'
# # print(피카츄1.글로벌_변수)

# # 각 인스턴스로 인스턴스 메서드 호출
# 피카츄1.스킬1사용()
# 피카츄2.스킬1사용()
# # 원 사용법
# print('hello'.upper())
# # 내부 동작 방식
# # print('hello'.upper('hello'))
# # # 내부 동작 방식을 직접 작성했을때, 실제로 이루어지는 방식
# # print('hello'.upper('hello', 'hello'))

# 피카츄1.고유번호 = 1
# print(피카츄1.고유번호)
# print(피카츄2.고유번호)
# print(포켓몬.고유번호)

# 포켓몬.새로운_포켓몬이_탄생했다('파이리')