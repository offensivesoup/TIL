import sys
sys.stdin = open('input.txt')

'''
전기줄을 교차하지 않게 만들어버리기
제거를 최소로 => 최대한 많은 전깃줄이 남게
dp에 무엇을 담는가? 제거했을 때 살아나는 전깃줄의 수
예제로 따졌을때
1 8 을 제거해봄 => 2 3 6 7 살아남 dp [ 0, 4, ]
2 2 를 제거해봄 => 살아나는 것 없음 [ 0, 4, 0, ]
3 9 를 제거해봄 => 4 6 7 9 살아남 [0, 4, 0, 4]
4 1 을 제거해봄 => 1 2 3 살아남 [0, 4, 0, 4, 3]
6 4, 7 6, 9 7, 10 10 순으로 다 제거해보았을때
1. 그 전선을 제거 했을 때, 살아나는 전선의 개수와
2. 그 전선을 나두었을 때, 남는 전선의 수
=> 즉 합선이 일어나는 전선은 모두 제거를 해야함.
=> 여기서 합선이 일어난다는 것은?
리스트로 따졌을때, 앞에 a를 담고 뒤에 그 연결 번호가 담긴 리스트를 받는다면
정렬을 해서
a는 무조건 앞에게 작은걸로 만든다면
그 뒤에 전선은 그 앞에 전선이 연결된 b의 값보다 작게되면 무조건 합선이 일어남
'''

N = int(input())
dp = [1] * N
tops = []
for _ in range(N):
    a, b = map(int,input().split())
    tops.append([a,b])
tops.sort(key = lambda x : x[0])

for i in range(1,N): # 1번부터 돌면된다
    for j in range(0, i): # 그 이전 전선까지 돌려봄
        if tops[i][1] > tops[j][1]: # 앞에 연결된 전선과 지금의 전선을 dp로 만들어내려면
            dp[i] = max(dp[j] + 1, dp[i])
            print(dp)
print(tops)
print(dp)
print(N - max(dp))
